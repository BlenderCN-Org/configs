<div  lang="en">
<p nodeIndex="16"> <em nodeIndex="351">Back online after <a href="http://www.reddit.com/r/programming/comments/2yo9qa/deus_ex_human_revolution_graphics_study/" nodeIndex="352">Reddit</a> and <a href="http://games.slashdot.org/story/15/03/12/2227239/rendering-a-frame-of-deus-ex-human-revolution" nodeIndex="353">Slashdot</a> killed my bandwidth with 30,000 visits in the last hours. Followed by <a href="https://news.ycombinator.com/item?id=9565891" nodeIndex="354">HN</a>.</em>                <br nodeIndex="355"><strong nodeIndex="356"><em nodeIndex="357">2015/03/11:</em></strong> <em nodeIndex="358">Update with comments from <a href="https://twitter.com/anji_nl" nodeIndex="359">Matthijs De Smedt</a>.</em></p>
<div id="RIL_IMG_1" class="RIL_IMG"></div>
<p nodeIndex="18">The original <a href="http://en.wikipedia.org/wiki/Deus_Ex" nodeIndex="361">Deus Ex</a> is among the most critically acclaimed PC games of its time and I spent countless hours helping JC Denton fend off the conspiracies of UNATCO or the Illuminati.</p>
<p nodeIndex="19">I never had the chance to play the second opus &ldquo;<a href="http://en.wikipedia.org/wiki/Deus_Ex:_Invisible_War" nodeIndex="362">Invisible War</a>&rdquo;, but I gave a shot to &ldquo;<a href="http://en.wikipedia.org/wiki/Deus_Ex:_Invisible_War" nodeIndex="363">Human Revolution</a>&rdquo; when it was released. All I can say is: it lived up to the expectations!</p>
<p nodeIndex="20">Deus Ex: Human Revolution is a game released in 2011 by Square Enix, and developed by Eidos Montr&eacute;al and Nixxes for the PC version. It uses a modified version of the Crystal engine made by <a href="http://www.crystald.com/" nodeIndex="364">Crystal Dynamics</a> and was one of the earliest games to support DirectX 11.                <br nodeIndex="365">
It featured great graphics at the time (still looks good!), and it was as beautiful as light-weight: even low-budget video cards could run the game smoothly.</p>
<p nodeIndex="21">I was curious about the rendering process, so I spent a few hours reverse-engineering the game, playing with <a href="https://github.com/baldurk/renderdoc" nodeIndex="366">Renderdoc</a>.                <br nodeIndex="367">
Here are the results of my investigation.</p>
<h1 nodeIndex="22">How a Frame is Rendered</h1>
<p nodeIndex="23">Below is the scene we&rsquo;ll consider. This is an actual screenshot of the game: the final image presented on the player&rsquo;s monitor.</p>

<p nodeIndex="27">At first glance, Deus Ex HR seems to use an approach similar to the <a href="http://www.slideshare.net/takahiroharada/forward-34779335" nodeIndex="368">forward+ rendering</a> technique.                <br nodeIndex="369">
Except that the game was developed years before forward+ became popular, actually it uses a precursor technique: the <a href="http://diaryofagraphicsprogrammer.blogspot.com/2008/03/light-pre-pass-renderer.html" nodeIndex="370">&ldquo;light pre-pass&rdquo;</a> approach.</p>
<h3 nodeIndex="28">Normal + Depth Pre-Pass</h3>
<p nodeIndex="29">The game renders all the visible objects, outputting only a <a href="http://en.wikipedia.org/wiki/Normal_mapping" nodeIndex="371">normal map</a> and a <a href="http://en.wikipedia.org/wiki/Depth_map" nodeIndex="372">depth map</a>.                <br nodeIndex="373">
Transparent objects are not rendered.                <br nodeIndex="374">
Depending on the mesh, each triangle will be rendered as a flat surface (same normal for all the fragments of the triangle), or can also be modulated by its own normal map. For example, the hand sculpture has its own normal map modulating the final normals rendered to the buffer.</p>
<div id="RIL_IMG_2" class="RIL_IMG"></div><div id="RIL_IMG_3" class="RIL_IMG"></div><div id="RIL_IMG_4" class="RIL_IMG"></div>
<p nodeIndex="47">While the normal map is being created, each draw call also generates at the same time the depth map:</p>

<p nodeIndex="51">This step is achieved in 166 draw calls.</p>
<h3 nodeIndex="52">Shadow Maps</h3>
<p nodeIndex="53">Shadows are generated through the <a href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html" nodeIndex="375">PSSM</a> technique.                <br nodeIndex="376">
In short, the scene is rendered once for each light able to cast a shadow. In our case there are 2 light sources: one in the small office behind the glass window on the right, and one on the top of the hand sculpture.</p>

<p nodeIndex="56">Each shadow map corresponds to a 1024x1024 square inside a 4096x3072 texture.</p>
<p nodeIndex="57">This pass is done in only 52 draw calls, much less than when rendering the full scene.                <br nodeIndex="377">
This is achieved by marking only the biggest objects as shadow-casters, skipping the smaller ones; plus some frustrum culling is probably used to render only the objects visible from the light source.</p>
<p nodeIndex="58">After the different shadow maps are generated, the depth map and the shadow maps are combined to produce a shadow mask texture.</p>

<p nodeIndex="62">Each texel of the depth map is read, and its visibility is calculated for each light source.                <br nodeIndex="378">
The final result is outputted to an RGBA 8-bit texture which acts like a mask:                <br nodeIndex="379">
the default value is white <code nodeIndex="380">(1, 1, 1, 1)</code> which means the texel is not shadowed by anything. If a texel is in the shadow of a certain light source, a byte corresponding to this light source is set to 0.                <br nodeIndex="381">
The shadow seen under the sculpture fingers is produced only by the light above them, not the office light, which is why they appear blue-ish: RGBA of <code nodeIndex="382">(0, 1, 1, 1)</code>.</p>
<p nodeIndex="63">This approach is able to handle 4 light sources at the same time, more if bit-masks are used instead of byte-masks.</p>
<p nodeIndex="64">Some small visible artifacts are typical of a <abbr title="Percentage Closer Filtering" nodeIndex="383">PCF</abbr> filtering technique.</p>
<p nodeIndex="65"><strong nodeIndex="384"><em nodeIndex="385">Update:</em></strong> Matthijs De Smedt <a href="https://twitter.com/anji_nl/status/575392391550500864" nodeIndex="386">pointed out</a> that each channel for a light source does not only store 0 or 1 (it would be a waste to use 8 bits for this): during this pass the PCF of the pixel is also computed and stored inside these 8 bits.                <br nodeIndex="387">
Strictly speaking it is not really a mask: we have a value of 1 if fully lit, a value of 0 if fully occluded (in the middle of the shadow), and a value between 0 and 1 around the edges of the shadow (to give smoother borders).</p>
<h3 nodeIndex="66">Screen Space Ambient Occlusion</h3>
<p nodeIndex="67">By sampling the depth buffer, the <a href="http://en.wikipedia.org/wiki/Screen_space_ambient_occlusion" nodeIndex="388">SSAO</a> map is created. A first &ldquo;noisy&rdquo; result is obtained through a pixel shader. Then on DirectX 11 compatible cards, a compute shader is used to apply a blur with a 19x19 kernel and smooth the result.                <br nodeIndex="389">
On older cards, the blur is done with a pixel shader.</p>
<div id="RIL_IMG_5" class="RIL_IMG"></div><div id="RIL_IMG_6" class="RIL_IMG"></div>
<p nodeIndex="77">After the SSAO texture is generated its value is stored within the alpha channel of the normal map.</p>
<div nodeIndex="78">
<div nodeIndex="79"></div>
<div class="screenshot-caption" nodeIndex="80" rilp="1">RGB: Normal&rsquo;s X, Y, Z                <br nodeIndex="390">
Alpha: Ambient Occlusion</div>
</div>
<h3 nodeIndex="81">Light Pre-Pass</h3>
<p nodeIndex="82">Each point-light of the scene is rendered one by one.                <br nodeIndex="391">
The only inputs are the Normal+SSAO map and the depth buffer. The pixels affected by a light depends only on the light radius and intensity.</p>
<div id="RIL_IMG_7" class="RIL_IMG"></div><div id="RIL_IMG_8" class="RIL_IMG"></div><div id="RIL_IMG_9" class="RIL_IMG"></div>
<p nodeIndex="100">The material reflecting the light is not important at this point yet, the information stored in the light map is simply how much light is potentially reflected (and its color) for each pixel of the scene.                <br nodeIndex="392">
Later, this irradiance information will be useful to calculate how much light is actually reflected depending on the mesh material and its specular property.</p>
<p nodeIndex="101">This scene uses 45 point-lights.</p>
<h3 nodeIndex="102">Forward-Rendering of Opaque Objects</h3>
<p nodeIndex="103">This is where the &ldquo;actual&rdquo; rendering finally happens.                <br nodeIndex="393">
Every single mesh of the scene is drawn to the screen. The final color of the pixel is calculated from:</p>
<ul nodeIndex="105"><li nodeIndex="104">the Normal+SSAO map, the shadow-maps and mask, the light map</li>
<li nodeIndex="106">the object&rsquo;s own textures / material properties</li>
<li nodeIndex="107">sometimes, a fake environment map (128x128 texture cube) to enhance reflections of the mesh</li>
</ul><p nodeIndex="108">First, all the opaque objects are rendered:</p>
<div id="RIL_IMG_10" class="RIL_IMG"></div>
<div id="RIL_IMG_11" class="RIL_IMG"></div><div id="RIL_IMG_12" class="RIL_IMG"></div><div id="RIL_IMG_13" class="RIL_IMG"></div>
<p nodeIndex="148">Notice that during this rendering step, the depth test function is set to <code nodeIndex="396">COMPARISON_EQUAL</code> and not <code nodeIndex="397">COMPARISON_LESS</code>.                <br nodeIndex="398">
Also, even if the depth test is enabled, depth-writing is disabled.                <br nodeIndex="399">
This is a trick to increase performance: remember that we already generated the scene depth buffer during the normal map creation. So we already know exactly the final depth value a pixel is supposed to have. By discarding any fragment with the wrong depth, we avoid heavy shading calculations which will just go to waste when a new fragment, closer to the camera, overrides with its own value.                <br nodeIndex="400">
This effectively achieves a rendering <strong nodeIndex="401">with 0 overdraw</strong>.</p>
<h3 nodeIndex="149">Transparent Objects</h3>
<p nodeIndex="150">This step renders decals (like signs on the wall, bullet impacts), transparent objects (like window glasses), or fake volumetric-lights (halo of spot-lights).</p>
<div id="a_overview_transparent" nodeIndex="151">
<div class="slick-margin05" nodeIndex="152">
<div nodeIndex="153">
<div nodeIndex="154"></div>
<div class="screenshot-caption" nodeIndex="155" rilp="1">Transparent Objects: None</div>
</div>
</div>
<div class="slick-margin05" nodeIndex="156">
<div nodeIndex="157">
<div nodeIndex="158"><div id="RIL_IMG_14" class="RIL_IMG"></div></div>

</div>
</div>
<div class="slick-margin05" nodeIndex="160">
<div nodeIndex="161">
<div nodeIndex="162"><div id="RIL_IMG_15" class="RIL_IMG"></div></div>

</div>
</div>
</div>
<p nodeIndex="164">The depth function is of course turned back to <code nodeIndex="402">COMPARISON_LESS_EQUAL</code> because we don&rsquo;t have yet any information about the position of transparent objects at this point. The depth-write stays disabled, to make sure a transparent mesh close to the camera does not cancel the rendering of another transparent mesh further behind.</p>
<p nodeIndex="165">The volumetric-lights look very nice: these are simply a group of &ldquo;sprites&rdquo; rendered in 3D in the scene at the good position. They are not single-sprite-billboards always facing the camera like you could expect, they&rsquo;re actually <a href="http://en.wikipedia.org/wiki/Icosahedron" nodeIndex="403">icosahedrons</a> 3D meshes scaled correctly to represent the light halo. The choice of icosahedrons is a compromise: approximating a sphere with as little geometry as possible.                <br nodeIndex="404">
Also these meshes don&rsquo;t rely on any texture: the &ldquo;halo&rdquo; is calculated 100% procedurally. The pixel shader, by sampling the depth map, can know how far the current pixel is located from the light source, and compute the final color value based on this distance.</p>
<p nodeIndex="166">Here is a wireframe representation of the meshes used to create the effect:</p>
<div id="RIL_IMG_16" class="RIL_IMG"></div>
<p nodeIndex="170">For reference the rendering of opaque and transparent objects is done in 253 draw calls.</p>
<h3 nodeIndex="171">Light Bloom</h3>
<p nodeIndex="172">To apply a <a href="http://en.wikipedia.org/wiki/Bloom_%28shader_effect%29" nodeIndex="405">bloom effect</a>, we need to know the set of pixels with a very strong light intensity.                <br nodeIndex="406">
Deus Ex HR uses a simple <abbr title="Low Dynamic Range" nodeIndex="407">LDR</abbr> workflow, there is no <abbr title="High Dynamic Range" nodeIndex="408">HDR</abbr> buffer on which we could apply a bright-pass filter.</p>
<p nodeIndex="173">But actually, while performing the previous pass, for each mesh an extra information was being outputted to the alpha channel: the emissive intensity of the mesh.</p>
<div id="RIL_IMG_17" class="RIL_IMG"></div>
<p nodeIndex="177">This is enough to create a bloom layer: the idea is to simply apply a <a href="http://en.wikipedia.org/wiki/Gaussian_blur" nodeIndex="409">Gaussian blur</a> with a large radius.                <br nodeIndex="410">
The image is first downscaled to half, then one-fourth of the original size (to make blurring more efficient) and finally blurred.</p>
<div id="RIL_IMG_18" class="RIL_IMG"></div><div id="RIL_IMG_19" class="RIL_IMG"></div><p nodeIndex="187">After we obtain the blur of the bright areas, we simply need to blend it on the top of the original scene. The blending is additive, because we only want to add brightness to some areas, never darken anything.</p>
<div id="RIL_IMG_20" class="RIL_IMG"></div>
<h3 nodeIndex="197">Anti-Aliasing</h3>
<p nodeIndex="198">To smooth-out the jagged lines on the edge of the meshes, Deus Ex HR supports different techniques of anti-aliasing like DLAA, MLAA, FXAA&hellip;                <br nodeIndex="415">
Here&rsquo;s an overview of the correction when using <a href="http://en.wikipedia.org/wiki/Fast_approximate_anti-aliasing" nodeIndex="416">FXAA</a>:</p>
<div id="RIL_IMG_21" class="RIL_IMG"></div><div id="RIL_IMG_22" class="RIL_IMG"></div><h3 nodeIndex="209">Color Correction</h3>
<p nodeIndex="210">We&rsquo;re almost done for the scene, it&rsquo;s already looking pretty good.                <br nodeIndex="420">
The last touch is a bit of color correction: <a href="http://en.wikipedia.org/wiki/Gamma_correction" nodeIndex="421">gamma correction</a> is applied and then a special pixel shader is used to give a yellowish tone to the scene.</p>
<p nodeIndex="211">The yellow tint, sometimes referred to as &ldquo;gold filter&rdquo;, is a bit like the trademark of the game.                <br nodeIndex="422">
For those who don&rsquo;t like it, <a href="http://kotaku.com/5843146/deus-ex-mod-removes-gold-filter-game-suddenly-looks-even-better/" nodeIndex="423">some mod</a> exists to disable it.</p>
<div id="a_overview_fxaa" nodeIndex="212">
<div class="slick-margin05" nodeIndex="213">
<div nodeIndex="214">
<div nodeIndex="215"></div>
<div class="screenshot-caption" nodeIndex="216" rilp="1">Color Correction: Before</div>
</div>
</div>
<div class="slick-margin05" nodeIndex="217">
<div nodeIndex="218">
<div nodeIndex="219"></div>

</div>
</div>
</div>
<h3 nodeIndex="221">User Interface</h3>
<p nodeIndex="222">The final step is to render the UI on the top of the view. This is done in 317 draw calls.</p>
<div id="a_overview_ui" nodeIndex="223">
<div class="slick-margin05" nodeIndex="224">
<div nodeIndex="225">
<div nodeIndex="226"></div>
<div class="screenshot-caption" nodeIndex="227" rilp="1">UI: Before</div>
</div>
</div>
<div class="slick-margin05" nodeIndex="228">
<div nodeIndex="229">
<div nodeIndex="230"></div>
<div class="screenshot-caption" nodeIndex="231" rilp="1">UI: After</div>
</div>
</div>
</div>
<p nodeIndex="232">And we&rsquo;re done! The texture is finally copied to the back-buffer and presented to the user.</p>
<h3 nodeIndex="233">Timeline</h3>
<p nodeIndex="234">Just to give a rough idea of the cost of each step of the process, here is a quick comparison of the time required to process the steps.</p>
<div id="RIL_IMG_23" class="RIL_IMG"></div>
<h1 nodeIndex="236">Bonus Notes</h1>
<h3 nodeIndex="237">Depth Of Field</h3>
<p nodeIndex="238">I don&rsquo;t think the <a href="http://en.wikipedia.org/wiki/Depth_of_field" nodeIndex="425">DoF</a> effect is ever used during the gameplay phases, but it is always present during the cinematics or the dialogs. The technique used in Deus Ex HR is the most basic you could think about: a 2-layer DoF, using Gaussian blur.</p>
<div id="RIL_IMG_24" class="RIL_IMG"></div><p nodeIndex="260">After we obtain 2 versions of the scene: the original crisp one and a blurred out-of-focus version, a pixel shader will <a href="http://en.wikipedia.org/wiki/Linear_interpolation" nodeIndex="429">lerp</a> between the 2 layers, depending on the pixel depth.                <br nodeIndex="430">
Too near or too close, the shader will use the blurred image; but at the right in-focus distance, the shader will use the original image.</p>
<div id="RIL_IMG_25" class="RIL_IMG"></div><p nodeIndex="274"> Depth-based interpolation</p>
<div id="b_dof_final" nodeIndex="275">
<div class="slick-margin05" nodeIndex="276">
<div nodeIndex="277">
<div nodeIndex="278"></div>
<div class="screenshot-caption" nodeIndex="279" rilp="1">Depth Of Field: Before</div>
</div>
</div>
<div class="slick-margin05" nodeIndex="280">
<div nodeIndex="281">
<div nodeIndex="282"><div id="RIL_IMG_26" class="RIL_IMG"></div></div>

</div>
</div>
</div>
<p nodeIndex="284">The Gaussian blur can be performed on compute shaders on compatible hardware, with a fallback to pixel shaders.</p>
<h3 nodeIndex="285">Silhouette Effect</h3>
<p nodeIndex="286"> While playing, it is possible to interact with various objects of the scene. The game indicates which object the player can manipulate by coloring them yellow and drawing a shiny silhouette around them.</p>
<p nodeIndex="287">In some games, the effect is very basic: sometimes the mesh is simply drawn at a bigger scale outputting a constant color; sometimes after the whole scene is rendered the relevant mesh is drawn again with some color and alpha modulation on the top of the final image.</p>
<p nodeIndex="288">But in Deus Ex HR the silhouette effect is perfectly integrated: any occluder in front the interactable mesh affects the final silhouette. Note how the shiny outline does not only follow the shape of the container but also the one of the policeman in front of it.</p>
<p nodeIndex="289">So how is such effect achieved?                <br nodeIndex="434">
It&rsquo;s a very simple trick. Remember the light map containing all the irradiance information for each pixel of the scene? We only need the RGB channels to store the irradiance, the alpha channel is not used. And this is precisely in the alpha channel that the game stores information about pixels belonging to an interactable object.</p>
<div id="RIL_IMG_27" class="RIL_IMG"></div><div id="RIL_IMG_28" class="RIL_IMG"></div>
<p nodeIndex="299">Well this is the only information we need to draw the silhouette: after the scene is rendered, but before the bloom, an extra pass occurs. This pass draws an overlay on the top of the scene: the pixels marked as interactive are rendered with a yellow tint modulated by a texture with some triangles-pattern, finally a <a href="http://en.wikipedia.org/wiki/Sobel_operator" nodeIndex="435">Sobel</a>-like edge-detection operator is used to draw the silhouette. Drawing the silhouette also outputs to the alpha channel of the render target: this is where the information about the brightness is located. The bloom effect will then make the silhouette shine.</p>
<div id="RIL_IMG_29" class="RIL_IMG"></div>
<h1 nodeIndex="309">Further Readings</h1>
<p nodeIndex="310">There are still many things that could be said about Deus Ex HR, if you want to know more you can check out some of the links below.</p>
<p nodeIndex="311"><a href="http://twvideo01.ubm-us.net/o1/vault/gdc2012/slides/Programming%20Track/DeSmedt_Matthijs_Deus%20Ex%20Is.pdf" nodeIndex="436">Deus Ex is in the Details</a> &ndash; GDC 2012 presentation by <a href="https://twitter.com/anji_nl" nodeIndex="437">Matthijs De Smedt</a>.                <br nodeIndex="438"><a href="http://gdcvault.com/play/1015489/Reimagining-a-Classic-The-Design" nodeIndex="439">The Design Challenges of Deus Ex: Human Revolution</a> &ndash; GDC 2012 presentation by Fran&ccedil;ois Lapikas.                <br nodeIndex="440"><a href="http://www.gdcvault.com/play/1015027/Building-the-Story-driven-Experience" nodeIndex="441">Building the Story-driven Experience of Deus Ex: Human Revolution</a> &ndash; GDC 2011 presentation by Mary DeMarle.</p>
<p nodeIndex="312">More discussion on this very topic: <a href="http://games.slashdot.org/story/15/03/12/2227239/rendering-a-frame-of-deus-ex-human-revolution" nodeIndex="442">Slashdot</a>, <a href="https://news.ycombinator.com/item?id=9565891" nodeIndex="443">Hacker News</a>, <a href="http://www.reddit.com/r/programming/comments/2yo9qa/deus_ex_human_revolution_graphics_study/" nodeIndex="444">Reddit</a>.</p>
</div>